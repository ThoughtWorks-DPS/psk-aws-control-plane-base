version: 2.1

orbs:
  terraform: twdps/terraform@3.1.1
  kube: twdps/kube-ops@1.1.2
  op: twdps/onepassword@3.0.0
  do: twdps/pipeline-events@4.1.0

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-infra-aws:alpine-7.5.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - op/env:
          env-file: op.<< parameters.cluster >>.env
      - op/tpl:
          tpl-path: environments
          tpl-file: << parameters.cluster >>.auto.tfvars.json
      - terraform/terraformrc
      - do/bash-functions

  run-integration-tests:
    description: run cluster configuration tests
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - run:
          name: run aws integration tests
          environment:
            CLUSTER: << parameters.cluster >>
          command: bash scripts/aws_integration_tests.sh << parameters.cluster >>
      - run:
          name: run cluster integration tests
          command: bash scripts/eks_addons_tests.sh << parameters.cluster >>
      - run:
          name: run ebs storage class tests
          command: bash scripts/ebs_storage_class_tests.sh << parameters.cluster >>
      - run:
          name: run efs storage class tests
          command: bash scripts/efs_storage_class_tests.sh << parameters.cluster >>
      - run:
          name: run karpenter node pool tests
          command: bash scripts/node_pool_tests.sh

  base-configuration-validation:
    description: write kubeconfig, cluster-url, and base64-certificate-authority-data to vault
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
        default: ""
    steps:
      - run:
          name: generate kubeconfig
          command: bash scripts/generate_kubeconfig.sh << parameters.cluster >>
      - run:
          name: store cluster identifiers and apply baseline configuration
          command: bash scripts/base_configuration.sh << parameters.cluster >>
      - op/env:
          env-file: op.<< parameters.cluster >>.env
      - run-integration-tests:
          cluster: << parameters.cluster >>

  replace-management-node-group-nodes:
      parameters:
        cluster:
          description: cluster and tf workspace name
          type: string
          default: ""
      steps:
        - run:
            name: taint eks-managed-nodegroup for complete refresh to latest AWS managed EKS-optimized ami
            command: |
              export TAINT=$(jq -er .auto_refresh_management_node_group << parameters.cluster >>.auto.tfvars.json)
              if [[ "$TAINT" == "true" ]]; then
                terraform taint "module.eks.module.eks_managed_node_group[\"management-arm-rkt-mng\"].aws_eks_node_group.this[0]"
              fi

jobs:

  integration-tests:
    docker:
      - image: *executor-image
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - checkout
      - set-environment:
          cluster: << parameters.cluster >>
      - kube/op-config:
          op-value: empc-lab/psk-aws-<< parameters.cluster>>/kubeconfig-base64
      - run-integration-tests:
          cluster: << parameters.cluster >>

# ============================================================ workflows

workflows:

  deploy sbx-i01-aws-us-east-1 control plane base:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - terraform/static-analysis:
          name: static code analysis
          context: *context
          executor-image: *executor-image
          trivy-scan: true
          before-static-analysis:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          filters: *on-push-main

      - terraform/plan:
          name: plan sbx-i01-aws-us-east-1 changes
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          tfc-workspace: psk-aws-control-plane-base-sbx-i01-aws-us-east-1
          tfc-organization: twdps
          before-plan:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          filters: *on-push-main

      - approve sbx-i01-aws-us-east-1 changes:
          type: approval
          requires:
            - static code analysis
            - plan sbx-i01-aws-us-east-1 changes
          filters: *on-push-main

      - terraform/apply:
          name: apply sbx-i01-aws-us-east-1 changes
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          before-apply:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          after-terraform-init:
            - replace-management-node-group-nodes:
                cluster: sbx-i01-aws-us-east-1
          after-apply:
            - base-configuration-validation:
                cluster: sbx-i01-aws-us-east-1
          requires:
            - approve sbx-i01-aws-us-east-1 changes
          filters: *on-push-main

  release prod-i01-aws-us-east-2 control plane base:
    jobs:
      - terraform/plan:
          name: plan prod-i01-aws-us-east-2 changes
          context: *context
          executor-image: *executor-image
          workspace: prod-i01-aws-us-east-2
          tfc-workspace: psk-aws-control-plane-base-prod-i01-aws-us-east-2
          tfc-organization: twdps
          before-plan:
            - set-environment:
                cluster: prod-i01-aws-us-east-2
          filters: *on-tag-main

      - approve prod-i01-aws-us-east-2 changes:
          type: approval
          requires:
            - plan prod-i01-aws-us-east-2 changes
          filters: *on-tag-main

      - terraform/apply:
          name: apply prod-i01-aws-us-east-2 changes
          context: *context
          executor-image: *executor-image
          workspace: prod-i01-aws-us-east-2
          before-apply:
            - set-environment:
                cluster: prod-i01-aws-us-east-2
          after-terraform-init:
            - replace-management-node-group-nodes:
                cluster: prod-i01-aws-us-east-2
          after-apply:
            - base-configuration-validation:
                cluster: prod-i01-aws-us-east-2
            - do/slack-bot:
                channel: lab-events
                message: Release psk-aws-control-plane-base
                include-link: true
                include-tag: true
          requires:
            - approve prod-i01-aws-us-east-2 changes
          filters: *on-tag-main

      - do/schedule-pipeline:
          name: schedule nightly integration tests
          context: *context
          scheduled-pipeline-name: nightly control plane base integration test
          scheduled-pipeline-description: |
            Automatically triggers nightly run of integration-test job
          hours-of-day: "[1]"
          days-of-week: "[\"SUN\"]"
          before-schedule:
            - op/env:
                env-file: op.prod-i01-aws-us-east-2.env
          filters: *on-tag-main

  run nightly integration test:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - integration-tests:
          name: nightly sbx-i01-aws-us-east-1 integration test
          cluster: sbx-i01-aws-us-east-1
          context: *context
      - integration-tests:
          name: nightly prod-i01-aws-us-east-2 integration test
          cluster: prod-i01-aws-us-east-2
          context: *context

#====================================================== tear down
  tear down psk control plane base:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - approve tear down:
          name: approve teardown sbx
          type: approval
          filters: *on-push-main

      - terraform/destroy:
          name: destroy sbx-i01-aws-us-east-1
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          before-destroy:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          requires:
            - approve teardown sbx
          filters: *on-push-main

      - approve tear down:
          name: approve teardown prod
          type: approval
          filters: *on-push-main

      - terraform/destroy:
          name: destroy prod-i01-aws-us-east-2
          context: *context
          executor-image: *executor-image
          workspace: prod-i01-aws-us-east-2
          before-destroy:
            - set-environment:
                cluster: prod-i01-aws-us-east-2
          requires:
            - approve teardown prod
          filters: *on-push-main