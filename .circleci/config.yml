version: 2.1

orbs:
  terraform: twdps/terraform@3.0.0
  op: twdps/onepassword@3.0.0
  do: twdps/pipeline-events@4.1.0

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-infra-aws:alpine-7.2.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

# ============================================================ commands and jobs

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - op/env:
          env-file: op.<< parameters.cluster >>.env
      - op/tpl:
          tpl-path: environments
          tpl-file: << parameters.cluster >>.auto.tfvars.json
      - terraform/terraformrc
      - do/bash-functions

  run-integration-tests:
    description: run cluster configuration tests
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - run:
          name: run cluster configuration tests
          environment:
            CLUSTER: <<parameters.cluster-name>>
          command: bash scripts/integration_tests.sh << parameters.cluster >>

  base-configuration-validation:
    description: write kubeconfig, cluster-url, and base64-certificate-authority-data to vault
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
        default: ""
    steps:
      - run:
          name: store cluster identifiers and apply baseline configuration
          command: bash scripts/base_configuration.sh << parameters.cluster >>
      - run-integration-tests:
          cluster: << parameters.cluster >>

# jobs:

#   integration-tests:
#     description: Recurring job to run pipeline integration tests and detect aws configuration drift
#     docker:
#       - image: *executor-image
#     parameters:
#       instance_name:
#         description: the VPC instance (and tfcloud workspace name) to run tests against
#         type: string
#       env-credentials:
#         description: identifier for op.*.env file
#         type: string
#     steps:
#       - checkout
#       - set-environment:
#           instance_name: << parameters.instance_name >>
#           env-credentials: << parameters.env-credentials >>
#       - run-inspec-tests:
#           instance-name: << parameters.instance_name >>

# ============================================================ workflows

workflows:

  deploy sbx-i01-aws-us-east-1 eks base:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - terraform/static-analysis:
          name: static code analysis
          context: *context
          executor-image: *executor-image
          trivy-scan: true
          before-static-analysis:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          filters: *on-push-main

      - terraform/plan:
          name: plan sbx-i01-aws-us-east-1 changes
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          before-plan:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          filters: *on-push-main
          
      - approve sbx-i01-aws-us-east-1 changes:
          type: approval
          requires:
            - static code analysis
            - plan sbx-i01-aws-us-east-1 changes
          filters: *on-push-main

      - terraform/apply:
          name: apply sbx-i01-aws-us-east-1 changes
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          before-apply:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          after-apply:
            - base-configuration-validation:
                cluster: sbx-i01-aws-us-east-1
          requires:
            - approve sbx-i01-aws-us-east-1 changes
          filters: *on-push-main

      # ====================================================== tear down 

      - approve tear down:
          type: approval
          filters: *on-push-main

      - terraform/destroy:
          name: destroy sbx-i01-aws-us-east-1
          context: *context
          executor-image: *executor-image
          workspace: sbx-i01-aws-us-east-1
          before-destroy:
            - set-environment:
                cluster: sbx-i01-aws-us-east-1
          requires:
            - approve tear down
          filters: *on-push-main

  #     - do/schedule-pipeline:
  #         name: Deploy sandbox nightly schedule
  #         context: *context
  #         executor-image-name: *executor-image
  #         shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
  #         scheduled-pipeline-name: Nightly VPC validation - sandbox
  #         scheduled-pipeline-description: |
  #           Automatically triggers nightly run of main pipeline for validating sandbox deployment pipeline vpcs
  #         hours-of-day: "[1]"
  #         days-of-week: "[\"SUN\"]"
  #         before-release:
  #           - set-environment:
  #               static: true
  #               env-credentials: nonprod
  #         filters: *on-push-main

  #     - do/schedule-pipeline:
  #         name: Deploy release nightly schedule
  #         context: *context
  #         executor-image-name: *executor-image
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         scheduled-pipeline-name: Nightly VPC validation - release
  #         scheduled-pipeline-description: |
  #           Automatically triggers nightly run of main pipeline for validating vpcs in release
  #         hours-of-day: "[1]"
  #         days-of-week: "[\"SUN\"]"
  #         before-release:
  #           - set-environment:
  #               static: true
  #               env-credentials: prod
  #         filters: *on-push-main


  # production release:
  #   when:
  #     not:
  #       equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #   jobs:
  #     - launch-dynamic-pipeline:
  #         name: generate release pipeline
  #         context: *context
  #         release-pipeline-name: release
  #         filters: *on-tag-main


  # run nightly sandbox validation jobs:
  #   when:
  #     and:
  #       - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #       - equal: [ nightly-sandbox-validation-schedule, << pipeline.schedule.name >> ]
  #   jobs:
  #     - launch-dynamic-pipeline:
  #         name: generate-sandbox-nightly-pipeline
  #         release-pipeline-name: sandbox
  #         custom-template-file: nightly.yml
  #         filters: *on-push-main

  # run nightly release validation jobs:
  #   when:
  #     and:
  #       - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #       - equal: [ nightly-release-validation-schedule, << pipeline.schedule.name >> ]
  #   jobs:
  #     - launch-dynamic-pipeline:
  #         name: generate-platform-nightly-pipeline
  #         release-pipeline-name: release
  #         custom-template-file: nightly.yml
  #         filters: *on-push-main
